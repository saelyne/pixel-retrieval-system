[{"/Users/saelyne/Documents/Github/pixel-retrieval-system-main/src/index.js":"1","/Users/saelyne/Documents/Github/pixel-retrieval-system-main/src/app.jsx":"2","/Users/saelyne/Documents/Github/pixel-retrieval-system-main/src/image.js":"3","/Users/saelyne/Documents/Github/pixel-retrieval-system-main/src/pages/quiz.jsx":"4","/Users/saelyne/Documents/Github/pixel-retrieval-system-main/src/pages/home.jsx":"5","/Users/saelyne/Documents/Github/pixel-retrieval-system-main/src/pages/end.jsx":"6","/Users/saelyne/Documents/Github/pixel-retrieval-system-main/src/components/header.jsx":"7","/Users/saelyne/Documents/Github/pixel-retrieval-system-main/src/service/firebase.js":"8"},{"size":219,"mtime":1665539882000,"results":"9","hashOfConfig":"10"},{"size":1771,"mtime":1665539882000,"results":"11","hashOfConfig":"10"},{"size":156258,"mtime":1665539882000,"results":"12","hashOfConfig":"10"},{"size":5659,"mtime":1665539882000,"results":"13","hashOfConfig":"10"},{"size":1439,"mtime":1665539882000,"results":"14","hashOfConfig":"10"},{"size":321,"mtime":1665539882000,"results":"15","hashOfConfig":"10"},{"size":194,"mtime":1665539882000,"results":"16","hashOfConfig":"10"},{"size":1307,"mtime":1665539882000,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1uyc3qx",{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/saelyne/Documents/Github/pixel-retrieval-system-main/src/index.js",[],"/Users/saelyne/Documents/Github/pixel-retrieval-system-main/src/app.jsx",[],"/Users/saelyne/Documents/Github/pixel-retrieval-system-main/src/image.js",[],"/Users/saelyne/Documents/Github/pixel-retrieval-system-main/src/pages/quiz.jsx",["35"],"import React, { useEffect, useState } from \"react\";\nimport Header from \"../components/header\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport db from \"../service/firebase\";\nimport { ref, update } from \"firebase/database\";\n\nimport \"./home.css\";\nimport Button from \"@mui/material/Button\";\n\nconst Quiz = ({ userID, questionID, setQuestionID, imageInfo, answerInfo }) => {\n  const MAX_SELECTED_COUNT = 5;\n  const NUM_IMAGES = 20;\n  const NUM_QUESTIONS = 20;\n  const enumerate = Array.from(Array(NUM_IMAGES).keys());\n  const navigate = useNavigate();\n\n  const [selectedCount, setSelectedCount] = useState(0);\n  const [candidateAnswers, setCandidateAnswers] = useState([]);\n  const [time, setTime] = useState(0);\n  const [running, setRunning] = useState(true);\n  const [logIndex, setLogIndex] = useState(0);\n  const [correct, setCorrect] = useState([]);\n  const [submitted, setSubmitted] = useState(false);\n\n  // useEffect(() => {\n  //   if (userID == \"\"){\n  //     alert (\"Go back to the main page and enter your user ID.\");\n  //   }\n  // })\n\n  useEffect(() => {\n    if (submitted){\n      \n    logData();\n\n      if (correct.length === MAX_SELECTED_COUNT) {\n        setRunning(false);\n        if (questionID === NUM_QUESTIONS - 1) {\n          alert(\"Great job! You've done all the tasks.\");\n          navigate(\"/end\");\n        } else {\n          alert(\"Great job! Moving on to the next question.\");\n          setQuestionID(questionID + 1);\n        }\n      } else {\n        for (let index of correct) {\n          document.getElementById(index.toString()).classList.add(\"correct\");\n        }\n        alert(\n          `You got ${correct.length} right. Find ${\n            MAX_SELECTED_COUNT - correct.length\n          } more!`\n        );\n      }\n    }\n  }, [correct]);\n\n  useEffect(() => {\n    let interval;\n    if (running) {\n      interval = setInterval(() => {\n        setTime((prevTime) => prevTime + 1);\n      }, 1000);\n    } else if (!running) {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [running]);\n\n  useEffect(() => {\n    setSelectedCount(0);\n    setCandidateAnswers([]);\n    setTime(0);\n    setRunning(true);\n    setLogIndex(0);\n    setCorrect([]);\n    setSubmitted(false);\n    const image_divs =\n      document.getElementsByClassName(\"candidate-images\")[0].children;\n    if (image_divs) {\n      for (let i = 0; i < image_divs.length; i++) {\n        let img = image_divs[i];\n        if (img.classList.contains(\"correct\")) {\n          img.classList.remove(\"correct\");\n        }\n        if (img.classList.contains(\"selected\")) {\n          img.classList.remove(\"selected\");\n        }\n      }\n    }\n  }, [questionID]);\n\n  // database\n  const logData = () => {\n    if (userID === \"\") return;\n    const save_path = \"/Log/\" + userID;\n    const updates = {};\n    updates[save_path + \"/\" + questionID + \"/\" + logIndex] = {\n      numCorrect: correct.length,\n      time,\n    };\n    setLogIndex(logIndex + 1);\n    return update(ref(db), updates);\n  };\n\n  const onClickImage = (target) => {\n    if (target.classList.contains(\"correct\")) {\n      return;\n    }\n    if (target.classList.contains(\"selected\")) {\n      setSelectedCount(selectedCount - 1);\n      const candidates = candidateAnswers.filter(\n        (answer) => answer !== parseInt(target.id)\n      );\n      setCandidateAnswers(candidates);\n    } else {\n      if (selectedCount === MAX_SELECTED_COUNT) {\n        alert(\n          `You've already selected ${MAX_SELECTED_COUNT} images. Please unselect one or click the Submit button.`\n        );\n        return;\n      } else {\n        const candidates = [...candidateAnswers];\n        candidates.push(parseInt(target.id));\n        setCandidateAnswers(candidates);\n        setSelectedCount(selectedCount + 1);\n      }\n    }\n    target.classList.toggle(\"selected\");\n  };\n\n  const onClickGrade = () => {\n    const correctList = answerInfo.filter((value) =>\n      candidateAnswers.includes(value)\n    );\n    setCorrect(correctList);\n    setSubmitted(true);\n  };\n\n  return (\n    <>\n      <Header content={`Question ${questionID + 1} / ${NUM_QUESTIONS}`} />\n      <div className=\"quiz-window\">\n        <div className=\"query\">\n          <h4>Target Image</h4>\n          <img src={imageInfo['query']} alt=\"\" />\n          <div className=\"query-description\">\n            <h4 style={{ marginTop: \"15px\", marginBottom: \"15px\" }}>\n              <span>{(\"0\" + Math.floor((time / 3600) % 60)).slice(-2)}:</span>\n              <span>{(\"0\" + Math.floor((time / 60) % 60)).slice(-2)}:</span>\n              <span>{(\"0\" + Math.floor(time % 60)).slice(-2)}</span>\n            </h4>\n            <h5 style={{ marginTop: \"15px\", marginBottom: \"15px\" }}>\n              Selected: {selectedCount} / {MAX_SELECTED_COUNT}\n            </h5>\n            <Button\n              variant=\"contained\"\n              color=\"success\"\n              size=\"medium\"\n              disabled={selectedCount === MAX_SELECTED_COUNT ? false : true}\n              onClick={() => onClickGrade()}\n            >\n              Submit\n            </Button>\n          </div>\n        </div>\n        <div className=\"candidate\">\n          <h4>\n            Candidate Images (scroll â†“) - Choose {MAX_SELECTED_COUNT} images\n            that contain the Target Image.\n          </h4>\n          <div className=\"candidate-images\">\n            {enumerate.map((item, ind) => (\n              <img\n                src={imageInfo[ind]}\n                key={ind}\n                id={ind}\n                alt=\"\"\n                onClick={(e) => onClickImage(e.target)}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Quiz;\n","/Users/saelyne/Documents/Github/pixel-retrieval-system-main/src/pages/home.jsx",[],"/Users/saelyne/Documents/Github/pixel-retrieval-system-main/src/pages/end.jsx",[],"/Users/saelyne/Documents/Github/pixel-retrieval-system-main/src/components/header.jsx",[],"/Users/saelyne/Documents/Github/pixel-retrieval-system-main/src/service/firebase.js",[],{"ruleId":"36","severity":1,"message":"37","line":57,"column":6,"nodeType":"38","endLine":57,"endColumn":15,"suggestions":"39"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'logData', 'navigate', 'questionID', 'setQuestionID', and 'submitted'. Either include them or remove the dependency array. If 'setQuestionID' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["40"],{"desc":"41","fix":"42"},"Update the dependencies array to be: [correct, logData, navigate, questionID, setQuestionID, submitted]",{"range":"43","text":"44"},[1757,1766],"[correct, logData, navigate, questionID, setQuestionID, submitted]"]