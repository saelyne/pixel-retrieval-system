[{"/Users/saelyne/Documents/Github/pixel-retrieval-system/src/index.js":"1","/Users/saelyne/Documents/Github/pixel-retrieval-system/src/app.jsx":"2","/Users/saelyne/Documents/Github/pixel-retrieval-system/src/image.js":"3","/Users/saelyne/Documents/Github/pixel-retrieval-system/src/pages/home.jsx":"4","/Users/saelyne/Documents/Github/pixel-retrieval-system/src/pages/quiz.jsx":"5","/Users/saelyne/Documents/Github/pixel-retrieval-system/src/pages/code.jsx":"6","/Users/saelyne/Documents/Github/pixel-retrieval-system/src/pages/end.jsx":"7","/Users/saelyne/Documents/Github/pixel-retrieval-system/src/code.js":"8","/Users/saelyne/Documents/Github/pixel-retrieval-system/src/service/firebase.js":"9","/Users/saelyne/Documents/Github/pixel-retrieval-system/src/components/header.jsx":"10"},{"size":219,"mtime":1665747360378,"results":"11","hashOfConfig":"12"},{"size":2414,"mtime":1665747360377,"results":"13","hashOfConfig":"12"},{"size":87185,"mtime":1665747360378,"results":"14","hashOfConfig":"12"},{"size":4348,"mtime":1665756161432,"results":"15","hashOfConfig":"12"},{"size":6398,"mtime":1665747360379,"results":"16","hashOfConfig":"12"},{"size":376,"mtime":1665747360378,"results":"17","hashOfConfig":"12"},{"size":2168,"mtime":1665747360378,"results":"18","hashOfConfig":"12"},{"size":103,"mtime":1665747360377,"results":"19","hashOfConfig":"12"},{"size":1307,"mtime":1665747360379,"results":"20","hashOfConfig":"12"},{"size":456,"mtime":1665747360377,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"16i4fsu",{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/saelyne/Documents/Github/pixel-retrieval-system/src/index.js",[],"/Users/saelyne/Documents/Github/pixel-retrieval-system/src/app.jsx",[],"/Users/saelyne/Documents/Github/pixel-retrieval-system/src/image.js",[],"/Users/saelyne/Documents/Github/pixel-retrieval-system/src/pages/home.jsx",["46","47","48"],"import React, { useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\n\nimport \"./home.css\";\nimport Header from \"../components/header\";\nimport { Form } from \"react-bootstrap\";\nimport Button from \"@mui/material/Button\";\n\nimport { imageInfoCollection, answerInfoCollection } from \"../image\";\nimport main from \"../static/img/main.png\";\nimport selected from \"../static/img/selected.png\";\nimport labeled from \"../static/img/labeled.png\";\nimport Alert from \"react-bootstrap/Alert\";\n\nconst Home = ({\n  setUserID,\n  setModeID,\n  setGroupImageInfo,\n  setGroupAnswerInfo,\n  MAX_SELECTED_COUNT,\n  NUM_IMAGES,\n  NUM_QUESTIONS,\n}) => {\n  const idRef = React.createRef();\n  const navigate = useNavigate();\n  const { id } = useParams();\n\n  useEffect(() => {\n    setGroupImageInfo(imageInfoCollection[id]);\n    setGroupAnswerInfo(answerInfoCollection[id]);\n    setModeID(id);\n  });\n\n  const onClickSubmit = () => {\n    setUserID(idRef.current.value);\n    navigate(\"/quiz\");\n  };\n\n  return (\n    <>\n      <Header questionID={-1} NUM_QUESTIONS={NUM_QUESTIONS} />\n      <div className=\"home-window\">\n        <div className=\"tutorial-window\">\n          <div>\n            In this study, you will go through {NUM_QUESTIONS - 2} questions\n            that ask you to choose images.\n          </div>\n          <div>\n            For each question, there is a{\" \"}\n            <span style={{ color: \"Purple\" }}>Target Image</span> (left), and{\" \"}\n            {NUM_IMAGES}{\" \"}\n            <span style={{ color: \"Purple\" }}>Candidate Images</span> (right).\n          </div>\n          <div>\n            Among Candidate Images, you need to{\" \"}\n            <span style={{ color: \"Brown\" }}>\n              choose {MAX_SELECTED_COUNT} images that you think contain the\n              object in the Target Image\n            </span>\n            .{\" \"}\n          </div>\n          <img src={main}></img>\n          <div>\n            Sometimes, there will be hints that indicate a certain part of the\n            image that MIGHT contain the Target Image as shown below.\n          </div>\n          <div>\n            For this type of questions,{\" \"}\n            <span style={{ color: \"Brown\" }}>\n              {\" \"}\n              you only have to compare the highlighted parts\n            </span>\n            , which can help you complete the task faster.{\" \"}\n          </div>\n          <img src={labeled}></img>\n          <div className=\"warning\">\n            <div className=\"intro-warning\">\n              <Alert variant=\"danger\">\n                <ul>\n                  <li>\n                    {\" \"}\n                    Since we measure the time taken, please do not take a rest\n                    in middle of each question as much as possible. The task\n                    will take ~15 min on average.\n                  </li>\n                  <li>\n                    Do not refresh the page or go back to a previous page while\n                    completing the task.\n                  </li>\n                </ul>\n              </Alert>\n            </div>\n            * Data we collect: user ID and time taken to complete each question.{\" \"}\n            <br />* We collect your ID to verify you on Prolific. The collected\n            IDs will be discarded after the study.\n            <div style={{ marginTop: \"15px\", marginBottom: \"15px\" }}>\n              If you agree with the above terms, please enter your{\" \"}\n              <span style={{ fontWeight: 800 }}>unique Prolific ID</span> to\n              start the task.\n            </div>\n          </div>\n        </div>\n        <div className=\"input-window\">\n          <Form>\n            <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n              {/* <Form.Label>To start the task, please enter your <span style={{fontWeight: 800}}>unique Prolific ID.</span></Form.Label> */}\n              <Form.Control\n                placeholder=\"Enter your unique Prolific ID\"\n                ref={idRef}\n              />\n              <Form.Text className=\"text-muted\">\n                {/* We'll never share your email with anyone else. */}\n              </Form.Text>\n            </Form.Group>\n            <Button variant=\"contained\" onClick={() => onClickSubmit()}>\n              Submit\n            </Button>\n          </Form>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Home;\n","/Users/saelyne/Documents/Github/pixel-retrieval-system/src/pages/quiz.jsx",["49"],"import React, { useEffect, useState } from \"react\";\nimport Header from \"../components/header\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport db from \"../service/firebase\";\nimport { ref, update } from \"firebase/database\";\n\nimport \"./home.css\";\nimport Button from \"@mui/material/Button\";\nimport Alert from \"react-bootstrap/Alert\";\n\nconst Quiz = ({\n  userID,\n  questionID,\n  setQuestionID,\n  imageInfo,\n  answerInfo,\n  modeID,\n  MAX_SELECTED_COUNT,\n  NUM_IMAGES,\n  NUM_QUESTIONS,\n}) => {\n  const enumerate = Array.from(Array(NUM_IMAGES).keys());\n  const navigate = useNavigate();\n\n  const [selectedCount, setSelectedCount] = useState(0);\n  const [candidateAnswers, setCandidateAnswers] = useState([]);\n  const [time, setTime] = useState(0);\n  const [running, setRunning] = useState(true);\n  const [logIndex, setLogIndex] = useState(0);\n  const [correct, setCorrect] = useState([]);\n  const [submitted, setSubmitted] = useState(false);\n\n  // useEffect(() => {\n  //   if (userID == \"\"){\n  //     alert (\"Go back to the main page and enter your user ID.\");\n  //   }\n  // })\n\n  useEffect(() => {\n    if (submitted) {\n      logData();\n      if (correct.length === MAX_SELECTED_COUNT) {\n        setRunning(false);\n        if (questionID === NUM_QUESTIONS - 1) {\n          alert(\"Great job! Moving on to the final page.\");\n          navigate(\"/end\");\n        } else if (questionID === 0) {\n          alert(\"Great job! Moving on to the next practice question.\");\n          setQuestionID(questionID + 1);\n        } else if (questionID === 1) {\n          alert(\"Great job! Now Let's start the task!\");\n          setQuestionID(questionID + 1);\n        } else {\n          alert(\"Great job! Moving on to the next question.\");\n          setQuestionID(questionID + 1);\n        }\n      } else {\n        // for (let index of correct) {\n        //   document.getElementById(index.toString()).classList.add(\"correct\");\n        // }\n        alert(\n          `You got ${correct.length} right. Find ${\n            MAX_SELECTED_COUNT - correct.length\n          } more!`\n        );\n      }\n    }\n  }, [correct]);\n\n  useEffect(() => {\n    let interval;\n    if (running) {\n      interval = setInterval(() => {\n        setTime((prevTime) => prevTime + 1);\n      }, 1000);\n    } else if (!running) {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [running]);\n\n  useEffect(() => {\n    document.getElementById(\"candidate-images\").scroll(0, 0);\n    setSelectedCount(0);\n    setCandidateAnswers([]);\n    setTime(0);\n    setRunning(true);\n    setLogIndex(0);\n    setCorrect([]);\n    setSubmitted(false);\n    const image_divs =\n      document.getElementsByClassName(\"candidate-images\")[0].children;\n    if (image_divs) {\n      for (let i = 0; i < image_divs.length; i++) {\n        let img = image_divs[i];\n        if (img.classList.contains(\"correct\")) {\n          img.classList.remove(\"correct\");\n        }\n        if (img.classList.contains(\"selected\")) {\n          img.classList.remove(\"selected\");\n        }\n      }\n    }\n  }, [questionID]);\n\n  // database\n  const logData = () => {\n    if (userID === \"\") return;\n    const save_path = \"/Log/\" + modeID + \"/\" + userID;\n    const updates = {};\n    updates[save_path + \"/\" + questionID + \"/\" + logIndex] = {\n      numCorrect: correct.length,\n      time,\n    };\n    setLogIndex(logIndex + 1);\n    return update(ref(db), updates);\n  };\n\n  const onClickImage = (target) => {\n    if (target.classList.contains(\"correct\")) {\n      return;\n    }\n    if (target.classList.contains(\"selected\")) {\n      setSelectedCount(selectedCount - 1);\n      const candidates = candidateAnswers.filter(\n        (answer) => answer !== parseInt(target.id)\n      );\n      setCandidateAnswers(candidates);\n    } else {\n      if (selectedCount === MAX_SELECTED_COUNT) {\n        alert(\n          `You've already selected ${MAX_SELECTED_COUNT} images. Please unselect one or click the Submit button.`\n        );\n        return;\n      } else {\n        const candidates = [...candidateAnswers];\n        candidates.push(parseInt(target.id));\n        setCandidateAnswers(candidates);\n        setSelectedCount(selectedCount + 1);\n      }\n    }\n    target.classList.toggle(\"selected\");\n  };\n\n  const onClickGrade = () => {\n    const correctList = answerInfo.filter((value) =>\n      candidateAnswers.includes(value)\n    );\n    setCorrect(correctList);\n    setSubmitted(true);\n  };\n\n  return (\n    <>\n      <Header questionID={questionID} NUM_QUESTIONS={NUM_QUESTIONS} />\n      {questionID === 1 ? (\n        <div className=\"label-warning\">\n          <Alert variant=\"danger\">\n            For this type of questions, you only have to compare the highlighted\n            parts, which can help you complete the task faster.\n          </Alert>\n        </div>\n      ) : (\n        <></>\n      )}\n      <div className=\"quiz-window\">\n        <div className=\"query\">\n          <h5>Target Image</h5>\n          <img src={imageInfo[\"query\"]} alt=\"\" />\n          <div className=\"query-description\">\n            <h4 style={{ marginTop: \"15px\", marginBottom: \"15px\" }}>\n              <span>{(\"0\" + Math.floor((time / 3600) % 60)).slice(-2)}:</span>\n              <span>{(\"0\" + Math.floor((time / 60) % 60)).slice(-2)}:</span>\n              <span>{(\"0\" + Math.floor(time % 60)).slice(-2)}</span>\n            </h4>\n            <h5 style={{ marginTop: \"15px\", marginBottom: \"15px\" }}>\n              Selected: {selectedCount} / {MAX_SELECTED_COUNT}\n            </h5>\n            <Button\n              variant=\"contained\"\n              color=\"success\"\n              size=\"medium\"\n              disabled={selectedCount === MAX_SELECTED_COUNT ? false : true}\n              onClick={() => onClickGrade()}\n            >\n              Submit\n            </Button>\n          </div>\n        </div>\n        <div className=\"candidate\">\n          <h5>\n            Candidate Images (scroll ↓) - Choose {MAX_SELECTED_COUNT} images\n            that contain the Target Image.\n          </h5>\n          <div className=\"candidate-images\" id=\"candidate-images\">\n            {enumerate.map((item, ind) => (\n              <img\n                src={imageInfo[ind]}\n                key={ind}\n                id={ind}\n                alt=\"\"\n                onClick={(e) => onClickImage(e.target)}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Quiz;\n","/Users/saelyne/Documents/Github/pixel-retrieval-system/src/pages/code.jsx",["50"],"import React from \"react\";\n\nimport \"./home.css\";\nimport { modeCode } from \"../code\";\n\nconst Code = () => {\n  return (\n    <>\n      <div className=\"code-window\">\n        <h5>Completion Code: CT1LKLR7</h5>\n        <br></br>\n        <h5>You've done all the tasks.</h5>\n        <h5>Thank you for participating in our study.</h5>\n      </div>\n    </>\n  );\n};\n\nexport default Code;\n","/Users/saelyne/Documents/Github/pixel-retrieval-system/src/pages/end.jsx",["51","52","53"],"import React, { useState, useEffect } from \"react\";\n\nimport db from \"../service/firebase\";\nimport { ref, update } from \"firebase/database\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport \"./home.css\";\nimport Box from \"@mui/material/Box\";\nimport Slider from \"@mui/material/Slider\";\nimport Button from \"@mui/material/Button\";\n\nimport labeledImage from \"../static/data/db/o40/TP_labled/462_oxford_001710.jpg\";\nimport unlabeledImage from \"../static/data/db/o40/TP/462_oxford_001710.jpg\";\n\nconst End = ({ modeID, userID }) => {\n  const [score, setScore] = useState(7);\n  const navigate = useNavigate();\n\n  const logData = () => {\n    if (userID === \"\") return;\n    const save_path = \"/Log/\" + modeID + \"/\" + userID;\n    const updates = {};\n    updates[save_path + \"/score\"] = {\n      score,\n    };\n    navigate(\"/powjdo\");\n    console.log(\"hello\");\n    return update(ref(db), updates);\n  };\n\n  return (\n    <>\n      <div className=\"end-window\">\n        <div>\n          Q. How helpful was it to see{\" \"}\n          <span style={{ color: \"Brown\" }}>\n            {\" \"}\n            hints (red line indicating an object){\" \"}\n          </span>{\" \"}\n          in completing the task compared to those without hints?\n          <div className=\"end-image-box\">\n            <div className=\"end-image\">\n              <div>Image without hints</div>\n              <img src={unlabeledImage} />\n            </div>\n            <div className=\"end-image\">\n              <div>Image with hints</div>\n              <img src={labeledImage} />\n            </div>\n          </div>\n        </div>\n        <div className=\"slider\">\n          <div>Not Helpful</div>\n          <Box sx={{ width: 300 }}>\n            <Slider\n              aria-label=\"Score\"\n              defaultValue={7}\n              valueLabelDisplay=\"auto\"\n              step={1}\n              marks\n              min={1}\n              max={7}\n              onChange={(e, val) => setScore(val)}\n            />\n          </Box>\n          <div>Very Helpful</div>\n        </div>\n        <Button variant=\"contained\" onClick={() => logData()}>\n          Submit\n        </Button>\n      </div>\n    </>\n  );\n};\n\nexport default End;\n","/Users/saelyne/Documents/Github/pixel-retrieval-system/src/code.js",[],"/Users/saelyne/Documents/Github/pixel-retrieval-system/src/service/firebase.js",[],"/Users/saelyne/Documents/Github/pixel-retrieval-system/src/components/header.jsx",[],{"ruleId":"54","severity":1,"message":"55","line":11,"column":8,"nodeType":"56","messageId":"57","endLine":11,"endColumn":16},{"ruleId":"58","severity":1,"message":"59","line":62,"column":11,"nodeType":"60","endLine":62,"endColumn":27},{"ruleId":"58","severity":1,"message":"59","line":75,"column":11,"nodeType":"60","endLine":75,"endColumn":30},{"ruleId":"61","severity":1,"message":"62","line":69,"column":6,"nodeType":"63","endLine":69,"endColumn":15,"suggestions":"64"},{"ruleId":"54","severity":1,"message":"65","line":4,"column":10,"nodeType":"56","messageId":"57","endLine":4,"endColumn":18},{"ruleId":"54","severity":1,"message":"66","line":1,"column":27,"nodeType":"56","messageId":"57","endLine":1,"endColumn":36},{"ruleId":"58","severity":1,"message":"59","line":44,"column":15,"nodeType":"60","endLine":44,"endColumn":43},{"ruleId":"58","severity":1,"message":"59","line":48,"column":15,"nodeType":"60","endLine":48,"endColumn":41},"no-unused-vars","'selected' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'MAX_SELECTED_COUNT', 'NUM_QUESTIONS', 'logData', 'navigate', 'questionID', 'setQuestionID', and 'submitted'. Either include them or remove the dependency array. If 'setQuestionID' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["67"],"'modeCode' is defined but never used.","'useEffect' is defined but never used.",{"desc":"68","fix":"69"},"Update the dependencies array to be: [MAX_SELECTED_COUNT, NUM_QUESTIONS, correct, logData, navigate, questionID, setQuestionID, submitted]",{"range":"70","text":"71"},[2084,2093],"[MAX_SELECTED_COUNT, NUM_QUESTIONS, correct, logData, navigate, questionID, setQuestionID, submitted]"]